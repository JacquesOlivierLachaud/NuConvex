/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file SquaredEuclideanDistance.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2012/11/02
 *
 * Implementation of inline methods defined in SquaredEuclideanDistance.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
template <typename TRealPoint>
inline
typename DGtal::SquaredEuclideanDistance<TRealPoint>::Value
DGtal::SquaredEuclideanDistance<TRealPoint>::
operator()( const Argument1 & arg1, const Argument2 & arg2 ) const
{
  Value v = NumberTraits<Value>::ZERO;
  for ( typename Argument::ConstIterator it1 = arg1.begin(), it2 = arg2.begin(), 
          itE1 = arg1.end(); it1 != itE1; ++it1, ++it2 )
    {
      v += ( *it1 - *it2 ) * ( *it1 - *it2 );
    }
  return v;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


