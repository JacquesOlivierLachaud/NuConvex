/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file MaximalPlaneSummary.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2012/12/07
 *
 * Implementation of inline methods defined in MaximalPlaneSummary.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
template <typename TSpace>
inline
DGtal::MaximalPlaneSummary<TSpace>::~MaximalPlaneSummary()
{
}
//-----------------------------------------------------------------------------
template <typename TSpace>
inline
DGtal::MaximalPlaneSummary<TSpace>::MaximalPlaneSummary()
{
}
//-----------------------------------------------------------------------------
template <typename TSpace>
inline
DGtal::MaximalPlaneSummary<TSpace>::MaximalPlaneSummary
( const MaximalPlaneSummary & other )
  : center( other.center ),
    majorAxis( other.majorAxis ),
    radius( other.radius ),
    normal( other.normal ),
    upper( other.upper ),
    lower( other.lower ),
    projectedArea( other.projectedArea )
{
}
//-----------------------------------------------------------------------------
template <typename TSpace>
inline
DGtal::MaximalPlaneSummary<TSpace> &
DGtal::MaximalPlaneSummary<TSpace>::operator= ( const MaximalPlaneSummary & other )
{
  if ( this != &other )
    {
      center = other.center;
      majorAxis = other.majorAxis;
      radius = other.radius;
      normal = other.normal;
      upper = other.upper;
      lower = other.lower;
      projectedArea = other.projectedArea;
    }
  return *this;
}
//-----------------------------------------------------------------------------
template <typename TSpace>
inline
typename DGtal::MaximalPlaneSummary<TSpace>::RealPoint
DGtal::MaximalPlaneSummary<TSpace>::
projectOntoUpperPlane( const RealPoint & p ) const
{
  Scalar dot = p.dot( normal );
  return normal * ( upper - dot ) + p;
}
//-----------------------------------------------------------------------------
template <typename TSpace>
inline
typename DGtal::MaximalPlaneSummary<TSpace>::RealPoint
DGtal::MaximalPlaneSummary<TSpace>::
projectOntoLowerPlane( const RealPoint & p ) const
{
  Scalar dot = p.dot( normal );
  return normal * ( lower - dot ) + p;
}
//-----------------------------------------------------------------------------
template <typename TSpace>
inline
typename DGtal::MaximalPlaneSummary<TSpace>::RealPoint
DGtal::MaximalPlaneSummary<TSpace>::
projectOntoPCAPlane( const RealPoint & p ) const
{
  Scalar dot = (p - centroid).dot( eigenvectors.column( 0 ) );
  return RealPoint( p - dot * eigenvectors.column( 0 ) );
}
//-----------------------------------------------------------------------------
template <typename TSpace>
inline
typename DGtal::MaximalPlaneSummary<TSpace>::RealPoint
DGtal::MaximalPlaneSummary<TSpace>::
projectOntoMedianPlane( const RealPoint & p ) const
{
  RealVector v = normal;// + eigenvectors.column( 0 );
  //v /= v.norm();
  Scalar dot = (p - centroid).dot( v );
  return RealPoint( p - dot * v );
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TSpace>
inline
void
DGtal::MaximalPlaneSummary<TSpace>::selfDisplay ( std::ostream & out ) const
{
  out << "[MaximalPlaneSummary" 
      << " center=" << center << " mAxis=" << majorAxis
      << " radius=" << radius << " normal=" << normal
      << " upper=" << upper << " lower=" << lower
      << " pArea=" << projectedArea << " ]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename TSpace>
inline
bool
DGtal::MaximalPlaneSummary<TSpace>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TSpace>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const MaximalPlaneSummary<TSpace> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


