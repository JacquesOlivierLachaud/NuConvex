/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file NuConvexSet.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2012/12/06
 *
 * Implementation of inline methods defined in NuConvexSet.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <algorithm>
#include "DGtal/math/linalg/EigenDecomposition.h"
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
inline
DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::
~NuConvexSet()
{
  if ( myVisitor != 0 ) delete myVisitor;
}
//-----------------------------------------------------------------------------
template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
inline
DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::
NuConvexSet( const Visitor & visitor, const Vertex2PointFunctor & vtx2pt )
  : myVisitor( 0 ), myVtx2PointFct( &vtx2pt ), myPolytope(),
    myVertexPolytopePredicate( myPolytope, vtx2pt ),
    myExtMode( true )
{
  myVisitor = new Visitor( visitor );
}
//-----------------------------------------------------------------------------
template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
inline
void
DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::
init( InternalInteger p, InternalInteger q,
      InternalInteger diameter )
{
#ifdef CHORD
  myPlane.init( p, q );
#else
  myPlane.init( diameter, p, q );
#endif
}
//-----------------------------------------------------------------------------
template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
inline
void
DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::
setExtensionMode( bool extMode )
{
  myExtMode = extMode;
}
//-----------------------------------------------------------------------------
template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
inline
typename DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::Point
DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::
coordinates( const Vertex & v ) const
{
  return (*myVtx2PointFct)( v );
}
//-----------------------------------------------------------------------------
template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
bool
DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::
compute( Scalar distanceUpperBound )
{
  if ( myVisitor->finished() ) return true;

  // Stores the nodes at the same distance from the origin point.
  std::vector<Node> layer;
  // Stores those nodes and their state. A list is required because
  // vertices may reappear in the visitor in a different order.
  std::list<NodeAndState> nodes_with_states;
  typename std::list<NodeAndState>::iterator nsIt;
  typename std::list<NodeAndState>::iterator nsItE = nodes_with_states.end(); 
  // "Late" vertices are vertices which appear after others but which
  // are closer. This may happen when the breadth-first traversal
  // disagrees too much with the distance function.
  std::vector<Node> lateLayer; 
  typedef typename Space::Point Point;
  // Stores the points that are tested for the extension.
  std::vector<Point> points;
  // Stores the first node of the layer.
  Node node = myVisitor->current();
  // The origin of the nu-convex set.
  Point x0 = coordinates( node.first );
  myPlane.extend( x0 );
  // Computes the nu-convex set by testing vertices in the order given
  // by the visitor.
  while ( ! myVisitor->finished() )
    {
      node = myVisitor->current();
      if ( ( distanceUpperBound >= NumberTraits<Scalar>::ZERO )
           && ( node.second > distanceUpperBound ) )
        break;
      // Get all vertices at same distance from x0.
      myVisitor->getCurrentLayer( layer );
      // Classify vertices of the layer.
      points.clear();
      for ( typename std::vector<Node>::const_iterator it = layer.begin(), 
              itE = layer.end(); it != itE; ++it )
	{
          VertexState vstate;
          Point p = coordinates( (*it).first );
          if ( myPolytope( p ) ) // Point is inside.
            {
              if ( myExtMode && myPlane.extendAsIs( p ) )
                vstate = ExtendedAsIs;
              else
                {
                  vstate = Extendable;
                  points.push_back( p );
                }
            }
          else
            vstate = Rejected;
          nodes_with_states.push_back( std::make_pair( *it, vstate ) );
        }
      // bool extend = myPlane.extend( points.begin(), points.end() );
      bool extend = points.empty() 
        ? true
        : myPlane.extend( points.begin(), points.end() );
      // If the points are within some nu-plane, we store them,
      // otherwise we must add them to the constraint polytope.
      while ( ! nodes_with_states.empty() )
        {
          Node n = myVisitor->current();
          nsIt = nodes_with_states.begin();
          while ( ( nsIt != nsItE ) && ( (*nsIt).first.first != n.first ) )
            ++nsIt;
          if ( nsIt == nsItE )
            {
              // std::cerr << " ! [" << n.first
              //           << "," << n.second <<"] " << std::endl;
              lateLayer.push_back( n );
              myVisitor->ignore();
            }
          else
            {
              Vertex v = (*nsIt).first.first;
              VertexState vstate = (*nsIt).second;
              nodes_with_states.erase( nsIt );
              if ( vstate == Rejected )
                {
                  myVisitor->ignore();
                  //myRejectedVertices.push_back( v );
                }
              else if ( extend || ( vstate == ExtendedAsIs ) )
                {
                  // then we can look for their neighbors.
                  myVisitor->expand( myVertexPolytopePredicate );
                  myVertices.push_back( v );
                }
              else // Extendable && ! extend
                {
                  myVisitor->ignore();
                  Point p = coordinates( v );
                  myPolytope.add( ClosedHalfSpace( p - x0, p.dot( p - x0 ) ) );
                  //myRejectedVertices.push_back( v );
                }
            }
        }
      // Push back "late" vertices in the visitor.
      for ( typename std::vector<Node>::const_iterator 
              it = lateLayer.begin(), 
              itE = lateLayer.end(); it != itE; ++it )
        {
          myVisitor->pushAgain( *it );
        }
      lateLayer.clear();
    }
  return myVisitor->finished();
}

//-----------------------------------------------------------------------------
template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
inline
typename DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::Size
DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::
size() const
{
  return myVertices.size();
}
//-----------------------------------------------------------------------------
template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
inline
bool
DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::
empty() const
{
  return myVertices.empty();
}
//-----------------------------------------------------------------------------
template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
inline
typename DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::ConstIterator
DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::
begin() const
{
  return myVertices.begin();
}
//-----------------------------------------------------------------------------
template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
inline
typename DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::ConstIterator
DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::
end() const
{
  return myVertices.end();
}
//-----------------------------------------------------------------------------
template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
inline
void
DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::
sort()
{
  std::sort( myVertices.begin(), myVertices.end() );
}
//-----------------------------------------------------------------------------
template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
template < typename VertexProjector >
inline
void
DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::
summarize( MaximalPlaneSummary<Space> & mps, 
           const VertexProjector & vProjector ) const
{
  ASSERT( ! myVertices.empty() );
  Point pcenter = coordinates( myVertices.front() );
  for ( Dimension i = 0; i < Space::dimension; ++i )
    mps.center[ i ] = pcenter[ i ];
  mps.majorAxis = myPlane.active();
  mps.radius = ( coordinates( myVertices.back() ) - pcenter ).norm();
  myPlane.getUnitNormal( mps.normal );
  myPlane.getBounds( mps.lower, mps.upper );
  mps.projectedArea = 0.0;  /**< the area of the projected nu-convex set. */
  // Used for computing ACP.
  mps.nb = 0;
  typedef typename MaximalPlaneSummary<Space>::Scalar Scalar;
  typedef typename MaximalPlaneSummary<Space>::RealVector RealVector;
  typedef typename MaximalPlaneSummary<Space>::RealMatrix RealMatrix;
  RealVector sum = RealVector::zero;
  RealMatrix squared_sum; // zero matrix
  RealMatrix tmp; // zero matrix
  for ( ConstIterator it = begin(), itE = end(); it != itE; ++it )
    {
      mps.projectedArea += vProjector( *it, mps.normal ); 
      Point p = coordinates( *it );
      Scalar x = (Scalar) p[ 0 ];
      Scalar y = (Scalar) p[ 1 ];
      Scalar z = (Scalar) p[ 2 ];
      Scalar xy = x * y;
      Scalar yz = y * z;
      Scalar xz = x * z;
      sum[ 0 ] += x;
      sum[ 1 ] += y;
      sum[ 2 ] += z;
      tmp.setComponent( 0, 0, x * x );
      tmp.setComponent( 0, 1, xy );
      tmp.setComponent( 0, 2, xz );
      tmp.setComponent( 1, 0, xy );
      tmp.setComponent( 1, 1, y * y );
      tmp.setComponent( 1, 2, yz );
      tmp.setComponent( 2, 0, xz );
      tmp.setComponent( 2, 1, yz );
      tmp.setComponent( 2, 2, z * z );
      squared_sum += tmp;
      ++mps.nb;
    }
  // Compute ACP.
  sum /= mps.nb;
  mps.centroid = sum;
  squared_sum /= mps.nb;
  for ( Dimension i = 0; i < Space::dimension; ++i )
    for ( Dimension j = 0; j < Space::dimension; ++j )
      squared_sum.setComponent( i, j, squared_sum( i, j ) - sum[ i ] * sum[ j ] );
  EigenDecomposition<Space::dimension,double>::getEigenDecomposition( squared_sum, mps.eigenvectors, mps.eigenvalues );
  ASSERT ( ( mps.eigenvalues[ 0 ] <= mps.eigenvalues[ 2 ]) 
           && (mps.eigenvalues[ 0 ] <= mps.eigenvalues[ 1 ]) 
           && (mps.eigenvalues[ 1 ] <= mps.eigenvalues[ 2 ]) );

  if ( mps.projectedArea < 0 )
    {
      typedef typename MaximalPlaneSummary<Space>::RealVector RealVector;
      mps.normal = RealVector() - mps.normal;
      std::swap( mps.lower, mps.upper );
      mps.lower = -mps.lower;
      mps.upper = -mps.upper;
      mps.projectedArea = -mps.projectedArea;
    }
  if ( mps.normal.dot( mps.eigenvectors.column( 0 ) ) < 0.0 )
    {
      mps.eigenvectors.setComponent( 0, 0, -mps.eigenvectors( 0, 0 ) );
      mps.eigenvectors.setComponent( 1, 0, -mps.eigenvectors( 1, 0 ) );
      mps.eigenvectors.setComponent( 2, 0, -mps.eigenvectors( 2, 0 ) );
    }
  double n = mps.eigenvectors.column( 0 ).norm();
  std::cerr << "angle=" << acos(  mps.normal.dot( mps.eigenvectors.column( 0 ) ) )
            << " k1=" << mps.eigenvalues[ 0 ]
            << " k2=" << mps.eigenvalues[ 1 ]
            << " k3=" << mps.eigenvalues[ 2 ] << std::endl;
}
//-----------------------------------------------------------------------------
template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
inline
void
DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::
swap( NuConvexSet & other )
{
  myVisitor->swap( other.myVisitor );
  std::swap( myVtx2PointFct, other.myVtx2PointFct );
  myPlane.swap( other.myPlane );
  myPolytope.swap( other.myPolytope );
  myVertexPolytopePredicate.swap( other.myVertexPolytopePredicate );
  myVertices.swap( other.myVertices );
  std::swap( myExtMode, other.myExtMode );
  //myRejectedVertices.swap( other.myRejectedVertices );
}
//-----------------------------------------------------------------------------
template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
inline
void
DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::
compact()
{
  if ( myVisitor != 0 ) delete myVisitor;
  myVisitor = 0;
  myPlane.clear();
  myPolytope.clear();
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
inline
void
DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::
selfDisplay ( std::ostream & out ) const
{
  out << "[NuConvexSet]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
inline
bool
DGtal::NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger>::
isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template < typename TSpace, typename TVisitor,
	   typename TVertex2PointFunctor, typename TInternalInteger >
inline
std::ostream&
DGtal::operator<< 
( std::ostream & out, 
  const NuConvexSet<TSpace, TVisitor, TVertex2PointFunctor, TInternalInteger> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


